//rule functionality: to make an estimation of how many more containers are needed to handle the rate of increase.
//					* high increase, 

FUNCTION_BLOCK recommend

VAR_INPUT
    CPU_load_delta  :    REAL; 
    MEM_load_delta  :  REAL;
END_VAR

VAR_OUTPUT
    replicas : REAL;
END_VAR

FUZZIFY CPU_load_delta
    TERM low := (-50, 0) (-50, 1) (-12, 0) ;
    TERM medium := (-38, 0) (-12, 1) (12, 1) (38, 0) ;
    TERM high := (12, 0) (50, 1) (50, 0);
END_FUZZIFY

FUZZIFY MEM_load_delta
    TERM low := (-50, 0) (-50, 1) (-12, 0) ;
    TERM medium := (-38, 0) (-12, 1) (12, 1) (38, 0) ;
    TERM high := (12, 0) (50, 1) (50, 0);
END_FUZZIFY

DEFUZZIFY replicas
	TERM doubleup := (0,0) (1,1) (2,0) ;
	TERM singleup := (0,0) (0.5, 1) (1,0);
    TERM none := (0,0) ;
    TERM singledown := (-1,0) (-0.5, 1) (0,0);
    TERM doubledown := (-2,0) (-1, 1) (0,0);
    METHOD: COG;
    DEFAULT := 0;  // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK first

AND: MIN;	// Use 'min' for 'and'
AND:MIN;	// Use 'min' activation method
ACCU:MAX;	// Use 'max' accumulation method

RULE 0: IF CPU_load_delta IS low AND MEM_load_delta IS low THEN replicas IS doubledown;
RULE 1: IF MEM_load_delta IS medium AND MEM_load_delta IS medium THEN replicas IS none;
RULE 2: IF CPU_load_delta IS high AND MEM_load_delta IS high THEN replicas IS doubleup;
RULE 3: IF CPU_load_delta IS low AND MEM_load_delta IS high THEN replicas IS none;
RULE 4: IF CPU_load_delta IS high AND MEM_load_delta IS low THEN replicas IS singleup;
RULE 5: IF CPU_load_delta IS medium AND MEM_load_delta IS low THEN replicas IS singledown;
RULE 6: IF CPU_load_delta IS low AND MEM_load_delta IS medium THEN replicas IS singledown;
RULE 7: IF CPU_load_delta IS high AND MEM_load_delta IS medium THEN replicas IS singleup;
RULE 8: IF CPU_load_delta IS medium AND MEM_load_delta IS high THEN replicas IS singleup;
END_RULEBLOCK

END_FUNCTION_BLOCK