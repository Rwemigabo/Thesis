//rule functionality: to make an estimation of how many more containers are needed to handle the predicted values
//

FUNCTION_BLOCK recommend

VAR_INPUT
    CPU_load_delta  :    REAL; 
    MEM_load_delta  :  REAL;
END_VAR

VAR_OUTPUT
    replicas : REAL;
END_VAR

FUZZIFY CPU_load_delta
    TERM low :=  ( 0,1) (10,0);
    TERM medium :=  (20, 0) (40,1) (60,1) (80,0);
    TERM high :=  (60,0) (75,1) (200, 1);
END_FUZZIFY

FUZZIFY MEM_load_delta
    TERM low := ( 0,1)  (5,0);
    TERM medium := (2.5, 0)  (6,1)  (20,1)  (25,0);
    TERM high := (15,0) (25,1) (100, 1);
END_FUZZIFY

DEFUZZIFY replicas
    
    TERM lowscale := ( 0,1)  (2,0);
    TERM mediumscale := (1.5, 0)  (2.5,1)  (3.5,1)  (4.5,0);
    TERM highscale := (3,0) (3,1) (5, 1);
    
    METHOD: COG;
    DEFAULT := 0;  // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK first

AND: MIN;	// Use 'min' for 'and'
AND:MIN;	// Use 'min' activation method
ACCU:MAX;	// Use 'max' accumulation method

RULE 0: IF CPU_load_delta IS low AND MEM_load_delta IS low THEN replicas IS lowscale;
RULE 1: IF MEM_load_delta IS medium AND CPU_load_delta IS medium THEN replicas IS mediumscale;
RULE 2: IF CPU_load_delta IS high AND MEM_load_delta IS high THEN replicas IS highscale;
RULE 3: IF CPU_load_delta IS low AND MEM_load_delta IS high THEN replicas IS mediumscale;
RULE 4: IF CPU_load_delta IS high AND MEM_load_delta IS low THEN replicas IS mediumscale;
RULE 5: IF CPU_load_delta IS medium AND MEM_load_delta IS low THEN replicas IS lowscale;
RULE 6: IF CPU_load_delta IS low AND MEM_load_delta IS medium THEN replicas IS lowscale;
RULE 7: IF CPU_load_delta IS high AND MEM_load_delta IS medium THEN replicas IS highscale;
RULE 8: IF CPU_load_delta IS medium AND MEM_load_delta IS high THEN replicas IS highscale;
END_RULEBLOCK

END_FUNCTION_BLOCK
